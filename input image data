

import tensorflow as tf
import numpy as np
import os



train_dir = '/Users/y/Downloads/rose&sunflower/train/'

def get_files(file_dir):

    roses = []
    label_roses = []
    sunflowers = []
    label_sunflowers = []
    for file in os.listdir(file_dir):
        name = file.split(sep='.')
        if name[0]=='rose':
            roses.append(file_dir + file)
            label_roses.append(0)
        else:
            sunflowers.append(file_dir + file)
            label_sunflowers.append(1)
    print('There are %d roses\nThere are %d sunflowers' %(len(roses), len(sunflowers)))

    image_list = np.hstack((roses, sunflowers))
    label_list = np.hstack((label_roses, label_sunflowers))

    temp = np.array([image_list, label_list])
    temp = temp.transpose()
    np.random.shuffle(temp)

    image_list = list(temp[:, 0])
    label_list = list(temp[:, 1])
    label_list = [int(i) for i in label_list]


    return image_list, label_list




def get_batch(image, label, image_W, image_H, batch_size, capacity):


    image = tf.cast(image, tf.string)
    label = tf.cast(label, tf.int32)

#the input queue
    input_queue = tf.train.slice_input_producer([image, label])
    label = input_queue[1]
    image_contents = tf.read_file(input_queue[0])
    image = tf.image.decode_jpeg(image_contents, channels=3)

#resize the image

    image = tf.image.resize_image_with_crop_or_pad(image, image_W, image_H)


    image = tf.image.per_image_standardization(image)

    image_batch, label_batch = tf.train.batch([image, label],
                                                batch_size= batch_size,
                                                num_threads= 64,
                                                capacity = capacity)



    label_batch = tf.reshape(label_batch, [batch_size])
    image_batch = tf.cast(image_batch, tf.float32)

    return image_batch, label_batch

'''
test if we can get the queue and output the image
the plt.imshow() cannot show the image directly, so I added a sentence plt.show() after it.
the problem is the image need to be closed so that the process can be continue
'''

# import matplotlib.pyplot as plt
# train_dir = '/Users/y/Downloads/rose&sunflower/train/'

# BATCH_SIZE = 10
# CAPACITY = 256
# IMG_W = 208
# IMG_H = 208
#
#
# image_list, label_list = get_files(train_dir)
# image_batch, label_batch = get_batch(image_list, label_list, IMG_W, IMG_H, BATCH_SIZE, CAPACITY)
#
# with tf.Session() as sess:
#    i = 0
#    coord = tf.train.Coordinator()
#    threads = tf.train.start_queue_runners(coord=coord)
#
#    try:
#        while not coord.should_stop() and i<1:
#
#            img, label = sess.run([image_batch, label_batch])
#
#            # just test one batch
#            for j in np.arange(BATCH_SIZE):
#                print('label: %d' %label[j])
#                plt.imshow(img[j,:,:,:])
#                plt.show()
#            i+=1
#
#    except tf.errors.OutOfRangeError:
#        print('done!')
#    finally:
#        coord.request_stop()
#    coord.join(threads)

