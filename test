
import os
import numpy as np
import tensorflow as tf
import input_data
import model



N_CLASSES = 2
IMG_W = 208  # resize the image, if the input image is too large, training will be very slow.
IMG_H = 208
BATCH_SIZE = 16
CAPACITY = 512
MAX_STEP = 1217 # with current parameters, it is suggested to use MAX_STEP>10k
learning_rate = 0.0001 # with current parameters, it is suggested to use learning rate<0.0001


def test_image():


    test_dir = '/Users/y/Downloads/rose&sunflower/test/'
    N_CLASSES = 2
    print('-------------------------')
    test, test_label = input_data.get_files(test_dir)
    BATCH_SIZE = len(test)
    print('There are %d test images totally..' % BATCH_SIZE)
    print('-------------------------')
    test_batch, test_label_batch = input_data.get_batch(test,
                                                          test_label,
                                                          IMG_W,
                                                          IMG_H,
                                                          BATCH_SIZE, 
                                                          CAPACITY)
	
    logits = model.inference(test_batch, BATCH_SIZE, N_CLASSES)
    testloss = model.losses(logits, test_label_batch) 
    testacc = model.evaluation(logits, test_label_batch)
	
    logs_train_dir = '/Users/y/Downloads/rose&sunflower/logs/train/'
    saver = tf.train.Saver()
        
    with tf.Session() as sess:
        print("Reading checkpoints...")
        ckpt = tf.train.get_checkpoint_state(logs_train_dir)
        if ckpt and ckpt.model_checkpoint_path:
            global_step = ckpt.model_checkpoint_path.split('/')[-1].split('-')[-1]
            saver.restore(sess, ckpt.model_checkpoint_path)
            print('Loading success, global_step is %s' % global_step)
        else:
            print('No checkpoint file found')
        print('-------------------------')        
        coord = tf.train.Coordinator()
        threads = tf.train.start_queue_runners(sess=sess, coord=coord)
        test_loss,test_acc = sess.run([testloss,testacc])
        print('The finally loss is %.3f' %test_loss)
        correct = int(BATCH_SIZE*test_acc)
        print('Correct images: %d' % correct)
        print('Wrong images: %d' % (BATCH_SIZE - correct))
        print('The accuracy of test are %.3f%%' %(test_acc*100.0))
    coord.request_stop()
    coord.join(threads)
    sess.close()

test_image()
